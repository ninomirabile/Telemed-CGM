name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Build frontend
        working-directory: frontend
        env:
          VITE_API_BASE_URL: ${{ secrets.STAGING_API_URL }}
          VITE_CGM_MODE: mock
        run: npm run build
        
      - name: Deploy frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'
          
      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Deploy backend to Railway
        uses: bervProject/railway-deploy@main
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        with:
          service: ${{ secrets.RAILWAY_SERVICE_ID }}
          
      - name: Run smoke tests
        run: |
          # Wait for deployment to complete
          sleep 30
          # Test frontend
          curl -f ${{ secrets.STAGING_FRONTEND_URL }}/health || exit 1
          # Test backend
          curl -f ${{ secrets.STAGING_API_URL }}/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    needs: deploy-staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Build frontend
        working-directory: frontend
        env:
          VITE_API_BASE_URL: ${{ secrets.PRODUCTION_API_URL }}
          VITE_CGM_MODE: real
        run: npm run build
        
      - name: Deploy frontend to AWS S3
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Sync to S3
        run: |
          aws s3 sync frontend/dist/ s3://${{ secrets.S3_BUCKET }} --delete
          
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
            
      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Deploy backend to AWS ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: backend/task-definition.json
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
          
      - name: Run production tests
        run: |
          # Wait for deployment to complete
          sleep 60
          # Test frontend
          curl -f ${{ secrets.PRODUCTION_FRONTEND_URL }}/health || exit 1
          # Test backend
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
          
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Production deployment completed successfully.
            
            - Frontend: ${{ secrets.PRODUCTION_FRONTEND_URL }}
            - Backend: ${{ secrets.PRODUCTION_API_URL }}
            - Build: ${{ github.run_number }}
          draft: false
          prerelease: false 